export function moduleData(){return{props:{refreshTable:Function,closePanel:Function,appdata:Object,clonerole:Object,resetclone:Function},data:function(){return{role:{editData:{name:"",label:"",caps:{}}},activeCat:"read",allcaps:this.appdata.capabilities}},mounted:function(){this.clonerole.caps&&(this.role.editData.caps=this.clonerole.caps),this.clonerole.name&&(this.role.editData.name=this.clonerole.label+" "+this.appdata.translations.copy),this.clonerole.label&&(this.role.editData.label=this.clonerole.name+"_"+this.appdata.translations.copy),this.resetclone()},computed:{totalAvailableCaps(){let a=this.appdata.capabilities,t=0;for(var i in a){t+=a[i].caps.length}return t},totalAssignedCaps(){let a=this.role.editData.caps,t=0;for(var i in a){1==a[i]&&(t+=1)}return t}},methods:{saveRole(){let a=this;jQuery.ajax({url:uip_user_app_ajax.ajax_url,type:"post",data:{action:"uip_create_role",security:uip_user_app_ajax.security,newrole:a.role.editData},success:function(t){let i=JSON.parse(t);i.error?uipNotification(i.error,{pos:"bottom-left",status:"danger"}):(uipNotification(i.message,{pos:"bottom-left",status:"danger"}),a.refreshTable())}})},isInCaps(a){let t=this.role.editData.caps;return!(!t[a]||1!=t[a])},toggleCap(a){let t=this.role.editData.caps;t[a]&&1==t[a]?this.role.editData.caps[a]=!1:this.role.editData.caps[a]=!0}},template:'<div class="" >        \x3c!-- EDITING USER --\x3e        <div class="" >          <div class="uip-text-bold uip-text-xl uip-margin-bottom-m">{{appdata.translations.newRole}}</div>          <div class="uip-flex uip-flex-column uip-row-gap-s">            <div class="uip-margin-bottom-s">              <div class="uip-margin-bottom-xs">{{appdata.translations.roleName}}</div>              <input type="text" class="uip-w-100p" v-model="role.editData.name">            </div>            <div class="uip-margin-bottom-s">              <div class="uip-margin-bottom-xs">{{appdata.translations.roleLabel}}</div>              <input type="text" class="uip-w-100p uip-margin-bottom-xs" v-model="role.editData.label">              <div class="uip-text-small uip-text-muted">{{appdata.translations.roleLabelDescription}}</div>            </div>            <div>              <div class="uip-flex uip-margin-bottom-s uip-flex-middle uip-flex-center uip-flex-between uip-background-muted uip-border-rounded uip-padding-xs uip-border-round">                  <div class="uip-text-m uip-text-bold uip-flex-grow">{{appdata.translations.capabilities}}</div>                  <div class="uip-text-muted">{{totalAssignedCaps}} / {{totalAvailableCaps}}</div>              </div>              <div class="uip-padding-xs uip-flex uip-gap-s">                <div class="uip-w-150 uip-flex uip-flex-column uip-gap-xxs">                  <template v-for="cat in appdata.capabilities">                    <div class="uip-padding-xxs uip-border-round uip-flex uip-gap-xxs hover:uip-background-muted uip-cursor-pointer"                     :class="{\'uip-background-muted uip-text-bold\' : activeCat == cat.shortname}" @click="activeCat = cat.shortname">                      <div class="material-icons-outlined">{{cat.icon}}</div>                      <div class="">{{cat.name}}</div>                    </div>                  </template>                </div>                <div class="uip-flex-grow uip-padding-xxs uip-flex uip-flex-column uip-row-gap-xxs">                  <template v-for="cap in appdata.capabilities[activeCat].caps">                    <div class="uip-flex uip-flex-between uip-flex-center uip-cursor-pointer" @click="toggleCap(cap)">                      <div class="">{{cap}}</div>                      <input type="checkbox" :checked="isInCaps(cap)">                    </div>                  </template>                </div>              </div>            </div>            <div class="uip-flex uip-flex-between uip-margin-top-m">              <button class="uip-button-default" @click="closePanel()">{{appdata.translations.cancel}}</button>              <button class="uip-button-primary" @click="saveRole()">{{appdata.translations.saveRole}}</button>            </div>          </div>        </div>      </div>'}};