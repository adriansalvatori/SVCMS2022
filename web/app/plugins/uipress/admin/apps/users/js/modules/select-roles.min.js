export function moduleData(){return{props:{selected:Array,name:String,placeholder:String,single:Boolean,translations:Object,updateRoles:Function},data:function(){return{thisSearchInput:"",options:[],selectedOptions:this.selected,ui:{dropOpen:!1}}},computed:{formattedOptions(){return this.options}},watch:{selectedOptions:{handler(e,i){this.updateRoles(this.selectedOptions)},deep:!0}},methods:{getPostTypes(){self=this,jQuery.ajax({url:uip_user_app_ajax.ajax_url,type:"post",data:{action:"uip_get_user_roles",security:uip_user_app_ajax.security},success:function(e){let i=JSON.parse(e);i.error?uipNotification(i.error):self.options=i.roles}})},addSelected(e,i){this.ifSelected(e,i)?this.removeSelected(e,i):1==this.single?i[0]=e:i.push(e)},removeSelected(e,i){let t=i.indexOf(e);t>-1&&(i=i.splice(t,1))},ifSelected:(e,i)=>i.indexOf(e)>-1,ifInSearch(e,i){let t=e.toLowerCase(),s=i.toLowerCase();return!!t.includes(s)},onClickOutside(e){const i=e.path||(e.composedPath?e.composedPath():void 0);!i||i.includes(this.$el)||this.$el.contains(e.target)||this.closeThisComponent()},openThisComponent(){this.ui.dropOpen=!0,this.getPostTypes(),requestAnimationFrame(()=>{document.documentElement.addEventListener("click",this.onClickOutside,!1)})},closeThisComponent(){this.ui.dropOpen=!1,document.documentElement.removeEventListener("click",this.onClickOutside,!1)}},template:'<div class="uip-position-relative" @click="openThisComponent">        <div class="uip-padding-xs uip-background-muted uip-border-round uip-w-200 uip-max-w-400 uip-cursor-pointer uip-border-box" :class="{\'uip-active-outline\' : ui.dropOpen}">           <div class="uip-flex uip-flex-center">            <div class="uip-flex-grow uip-margin-right-s">              <div>                <span class="uk-text-meta">{{name}}...</span>              </div>            </div>            <span class="material-icons-outlined uip-text-muted">add</span>            <span v-if="selectedOptions.length > 0" class="uip-text-inverse uip-background-primary uip-border-round uip-text-s uip-w-18 uip-margin-left-xxs uip-text-center">              {{selectedOptions.length}}            </span>          </div>        </div>        <div v-if="ui.dropOpen" class="uip-position-absolute uip-background-default uip-border-round uip-border uip-w-400 uip-max-w-400 uip-border-box uip-z-index-9 uip-margin-top-xs uip-overflow-hidden">          <div class="uip-flex uip-background-default uip-padding-xs uip-border-bottom">            <span class="material-icons-outlined uip-text-muted uip-margin-right-xs">search</span>            <input class="uip-blank-input uip-flex-grow" type="search"              :placeholder="placeholder" v-model="thisSearchInput" autofocus>          </div>          <div class="uip-max-h-280 uip-overflow-auto">            <template v-for="option in formattedOptions">              <div class="uip-background-default uip-padding-xs hover:uip-background-muted"               @click="addSelected(option.name, selectedOptions)"               v-if="ifInSearch(option.name, thisSearchInput)"               style="cursor: pointer">                <div class="uip-flex uip-flex-row uip-flex-center">                  <div class="uip-flex uip-flex-center uip-flex-middle uip-margin-right-xs">                    <input type="checkbox" :name="option.name" :value="option.name" :checked="ifSelected(option.name, selectedOptions)">                  </div>                  <div class="uip-flex-grow">                    <div class="uip-text-bold uip-text-emphasis">{{option.label}}</div>                    <div class="uip-text-muted">{{option.name}}</div>                  </div>                </div>              </div>            </template>          </div>        </div>      </div>'}};